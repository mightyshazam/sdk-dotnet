// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: temporal/api/workflowservice/v1/service.proto
// </auto-generated>
// Original file comments:
// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Temporal.Api.WorkflowService.V1 {
  /// <summary>
  /// WorkflowService API defines how Temporal SDKs and other clients interact with the Temporal server
  /// to create and interact with workflows and activities.
  ///
  /// Users are expected to call `StartWorkflowExecution` to create a new workflow execution.
  ///
  /// To drive workflows, a worker using a Temporal SDK must exist which regularly polls for workflow
  /// and activity tasks from the service. For each workflow task, the sdk must process the
  /// (incremental or complete) event history and respond back with any newly generated commands.
  ///
  /// For each activity task, the worker is expected to execute the user's code which implements that
  /// activity, responding with completion or failure.
  /// </summary>
  public static partial class WorkflowService
  {
    static readonly string __ServiceName = "temporal.api.workflowservice.v1.WorkflowService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest> __Marshaller_temporal_api_workflowservice_v1_RegisterNamespaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse> __Marshaller_temporal_api_workflowservice_v1_RegisterNamespaceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest> __Marshaller_temporal_api_workflowservice_v1_DescribeNamespaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse> __Marshaller_temporal_api_workflowservice_v1_DescribeNamespaceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest> __Marshaller_temporal_api_workflowservice_v1_ListNamespacesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse> __Marshaller_temporal_api_workflowservice_v1_ListNamespacesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest> __Marshaller_temporal_api_workflowservice_v1_UpdateNamespaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse> __Marshaller_temporal_api_workflowservice_v1_UpdateNamespaceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest> __Marshaller_temporal_api_workflowservice_v1_DeprecateNamespaceRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse> __Marshaller_temporal_api_workflowservice_v1_DeprecateNamespaceResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest> __Marshaller_temporal_api_workflowservice_v1_StartWorkflowExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse> __Marshaller_temporal_api_workflowservice_v1_StartWorkflowExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest> __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse> __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest> __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryReverseRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse> __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryReverseResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest> __Marshaller_temporal_api_workflowservice_v1_PollWorkflowTaskQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse> __Marshaller_temporal_api_workflowservice_v1_PollWorkflowTaskQueueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest> __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskCompletedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse> __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskCompletedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest> __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskFailedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse> __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskFailedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest> __Marshaller_temporal_api_workflowservice_v1_PollActivityTaskQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse> __Marshaller_temporal_api_workflowservice_v1_PollActivityTaskQueueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest> __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse> __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest> __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse> __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse> __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest> __Marshaller_temporal_api_workflowservice_v1_RequestCancelWorkflowExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse> __Marshaller_temporal_api_workflowservice_v1_RequestCancelWorkflowExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest> __Marshaller_temporal_api_workflowservice_v1_SignalWorkflowExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse> __Marshaller_temporal_api_workflowservice_v1_SignalWorkflowExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest> __Marshaller_temporal_api_workflowservice_v1_SignalWithStartWorkflowExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse> __Marshaller_temporal_api_workflowservice_v1_SignalWithStartWorkflowExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest> __Marshaller_temporal_api_workflowservice_v1_ResetWorkflowExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse> __Marshaller_temporal_api_workflowservice_v1_ResetWorkflowExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest> __Marshaller_temporal_api_workflowservice_v1_TerminateWorkflowExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse> __Marshaller_temporal_api_workflowservice_v1_TerminateWorkflowExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest> __Marshaller_temporal_api_workflowservice_v1_ListOpenWorkflowExecutionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse> __Marshaller_temporal_api_workflowservice_v1_ListOpenWorkflowExecutionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest> __Marshaller_temporal_api_workflowservice_v1_ListClosedWorkflowExecutionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse> __Marshaller_temporal_api_workflowservice_v1_ListClosedWorkflowExecutionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest> __Marshaller_temporal_api_workflowservice_v1_ListWorkflowExecutionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse> __Marshaller_temporal_api_workflowservice_v1_ListWorkflowExecutionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest> __Marshaller_temporal_api_workflowservice_v1_ListArchivedWorkflowExecutionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse> __Marshaller_temporal_api_workflowservice_v1_ListArchivedWorkflowExecutionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest> __Marshaller_temporal_api_workflowservice_v1_ScanWorkflowExecutionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse> __Marshaller_temporal_api_workflowservice_v1_ScanWorkflowExecutionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest> __Marshaller_temporal_api_workflowservice_v1_CountWorkflowExecutionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse> __Marshaller_temporal_api_workflowservice_v1_CountWorkflowExecutionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest> __Marshaller_temporal_api_workflowservice_v1_GetSearchAttributesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse> __Marshaller_temporal_api_workflowservice_v1_GetSearchAttributesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest> __Marshaller_temporal_api_workflowservice_v1_RespondQueryTaskCompletedRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse> __Marshaller_temporal_api_workflowservice_v1_RespondQueryTaskCompletedResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest> __Marshaller_temporal_api_workflowservice_v1_ResetStickyTaskQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse> __Marshaller_temporal_api_workflowservice_v1_ResetStickyTaskQueueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest> __Marshaller_temporal_api_workflowservice_v1_QueryWorkflowRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse> __Marshaller_temporal_api_workflowservice_v1_QueryWorkflowResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest> __Marshaller_temporal_api_workflowservice_v1_DescribeWorkflowExecutionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse> __Marshaller_temporal_api_workflowservice_v1_DescribeWorkflowExecutionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest> __Marshaller_temporal_api_workflowservice_v1_DescribeTaskQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse> __Marshaller_temporal_api_workflowservice_v1_DescribeTaskQueueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest> __Marshaller_temporal_api_workflowservice_v1_GetClusterInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse> __Marshaller_temporal_api_workflowservice_v1_GetClusterInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest> __Marshaller_temporal_api_workflowservice_v1_GetSystemInfoRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse> __Marshaller_temporal_api_workflowservice_v1_GetSystemInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest> __Marshaller_temporal_api_workflowservice_v1_ListTaskQueuePartitionsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse> __Marshaller_temporal_api_workflowservice_v1_ListTaskQueuePartitionsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest> __Marshaller_temporal_api_workflowservice_v1_CreateScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse> __Marshaller_temporal_api_workflowservice_v1_CreateScheduleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest> __Marshaller_temporal_api_workflowservice_v1_DescribeScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse> __Marshaller_temporal_api_workflowservice_v1_DescribeScheduleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest> __Marshaller_temporal_api_workflowservice_v1_UpdateScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse> __Marshaller_temporal_api_workflowservice_v1_UpdateScheduleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest> __Marshaller_temporal_api_workflowservice_v1_PatchScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse> __Marshaller_temporal_api_workflowservice_v1_PatchScheduleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest> __Marshaller_temporal_api_workflowservice_v1_ListScheduleMatchingTimesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse> __Marshaller_temporal_api_workflowservice_v1_ListScheduleMatchingTimesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest> __Marshaller_temporal_api_workflowservice_v1_DeleteScheduleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse> __Marshaller_temporal_api_workflowservice_v1_DeleteScheduleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest> __Marshaller_temporal_api_workflowservice_v1_ListSchedulesRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse> __Marshaller_temporal_api_workflowservice_v1_ListSchedulesResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest, global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse> __Method_RegisterNamespace = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest, global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterNamespace",
        __Marshaller_temporal_api_workflowservice_v1_RegisterNamespaceRequest,
        __Marshaller_temporal_api_workflowservice_v1_RegisterNamespaceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest, global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse> __Method_DescribeNamespace = new grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest, global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeNamespace",
        __Marshaller_temporal_api_workflowservice_v1_DescribeNamespaceRequest,
        __Marshaller_temporal_api_workflowservice_v1_DescribeNamespaceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest, global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse> __Method_ListNamespaces = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest, global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListNamespaces",
        __Marshaller_temporal_api_workflowservice_v1_ListNamespacesRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListNamespacesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest, global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse> __Method_UpdateNamespace = new grpc::Method<global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest, global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateNamespace",
        __Marshaller_temporal_api_workflowservice_v1_UpdateNamespaceRequest,
        __Marshaller_temporal_api_workflowservice_v1_UpdateNamespaceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest, global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse> __Method_DeprecateNamespace = new grpc::Method<global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest, global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeprecateNamespace",
        __Marshaller_temporal_api_workflowservice_v1_DeprecateNamespaceRequest,
        __Marshaller_temporal_api_workflowservice_v1_DeprecateNamespaceResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse> __Method_StartWorkflowExecution = new grpc::Method<global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartWorkflowExecution",
        __Marshaller_temporal_api_workflowservice_v1_StartWorkflowExecutionRequest,
        __Marshaller_temporal_api_workflowservice_v1_StartWorkflowExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse> __Method_GetWorkflowExecutionHistory = new grpc::Method<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowExecutionHistory",
        __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryRequest,
        __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse> __Method_GetWorkflowExecutionHistoryReverse = new grpc::Method<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest, global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWorkflowExecutionHistoryReverse",
        __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryReverseRequest,
        __Marshaller_temporal_api_workflowservice_v1_GetWorkflowExecutionHistoryReverseResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse> __Method_PollWorkflowTaskQueue = new grpc::Method<global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PollWorkflowTaskQueue",
        __Marshaller_temporal_api_workflowservice_v1_PollWorkflowTaskQueueRequest,
        __Marshaller_temporal_api_workflowservice_v1_PollWorkflowTaskQueueResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse> __Method_RespondWorkflowTaskCompleted = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondWorkflowTaskCompleted",
        __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskCompletedRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskCompletedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse> __Method_RespondWorkflowTaskFailed = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest, global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondWorkflowTaskFailed",
        __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskFailedRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondWorkflowTaskFailedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse> __Method_PollActivityTaskQueue = new grpc::Method<global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PollActivityTaskQueue",
        __Marshaller_temporal_api_workflowservice_v1_PollActivityTaskQueueRequest,
        __Marshaller_temporal_api_workflowservice_v1_PollActivityTaskQueueResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse> __Method_RecordActivityTaskHeartbeat = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordActivityTaskHeartbeat",
        __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatRequest,
        __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse> __Method_RecordActivityTaskHeartbeatById = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest, global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RecordActivityTaskHeartbeatById",
        __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatByIdRequest,
        __Marshaller_temporal_api_workflowservice_v1_RecordActivityTaskHeartbeatByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse> __Method_RespondActivityTaskCompleted = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondActivityTaskCompleted",
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse> __Method_RespondActivityTaskCompletedById = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondActivityTaskCompletedById",
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedByIdRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCompletedByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse> __Method_RespondActivityTaskFailed = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondActivityTaskFailed",
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse> __Method_RespondActivityTaskFailedById = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondActivityTaskFailedById",
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedByIdRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskFailedByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse> __Method_RespondActivityTaskCanceled = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondActivityTaskCanceled",
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse> __Method_RespondActivityTaskCanceledById = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest, global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondActivityTaskCanceledById",
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledByIdRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondActivityTaskCanceledByIdResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse> __Method_RequestCancelWorkflowExecution = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RequestCancelWorkflowExecution",
        __Marshaller_temporal_api_workflowservice_v1_RequestCancelWorkflowExecutionRequest,
        __Marshaller_temporal_api_workflowservice_v1_RequestCancelWorkflowExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse> __Method_SignalWorkflowExecution = new grpc::Method<global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignalWorkflowExecution",
        __Marshaller_temporal_api_workflowservice_v1_SignalWorkflowExecutionRequest,
        __Marshaller_temporal_api_workflowservice_v1_SignalWorkflowExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse> __Method_SignalWithStartWorkflowExecution = new grpc::Method<global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignalWithStartWorkflowExecution",
        __Marshaller_temporal_api_workflowservice_v1_SignalWithStartWorkflowExecutionRequest,
        __Marshaller_temporal_api_workflowservice_v1_SignalWithStartWorkflowExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse> __Method_ResetWorkflowExecution = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetWorkflowExecution",
        __Marshaller_temporal_api_workflowservice_v1_ResetWorkflowExecutionRequest,
        __Marshaller_temporal_api_workflowservice_v1_ResetWorkflowExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse> __Method_TerminateWorkflowExecution = new grpc::Method<global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TerminateWorkflowExecution",
        __Marshaller_temporal_api_workflowservice_v1_TerminateWorkflowExecutionRequest,
        __Marshaller_temporal_api_workflowservice_v1_TerminateWorkflowExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse> __Method_ListOpenWorkflowExecutions = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListOpenWorkflowExecutions",
        __Marshaller_temporal_api_workflowservice_v1_ListOpenWorkflowExecutionsRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListOpenWorkflowExecutionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse> __Method_ListClosedWorkflowExecutions = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListClosedWorkflowExecutions",
        __Marshaller_temporal_api_workflowservice_v1_ListClosedWorkflowExecutionsRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListClosedWorkflowExecutionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse> __Method_ListWorkflowExecutions = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListWorkflowExecutions",
        __Marshaller_temporal_api_workflowservice_v1_ListWorkflowExecutionsRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListWorkflowExecutionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse> __Method_ListArchivedWorkflowExecutions = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListArchivedWorkflowExecutions",
        __Marshaller_temporal_api_workflowservice_v1_ListArchivedWorkflowExecutionsRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListArchivedWorkflowExecutionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse> __Method_ScanWorkflowExecutions = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ScanWorkflowExecutions",
        __Marshaller_temporal_api_workflowservice_v1_ScanWorkflowExecutionsRequest,
        __Marshaller_temporal_api_workflowservice_v1_ScanWorkflowExecutionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse> __Method_CountWorkflowExecutions = new grpc::Method<global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest, global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CountWorkflowExecutions",
        __Marshaller_temporal_api_workflowservice_v1_CountWorkflowExecutionsRequest,
        __Marshaller_temporal_api_workflowservice_v1_CountWorkflowExecutionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest, global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse> __Method_GetSearchAttributes = new grpc::Method<global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest, global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSearchAttributes",
        __Marshaller_temporal_api_workflowservice_v1_GetSearchAttributesRequest,
        __Marshaller_temporal_api_workflowservice_v1_GetSearchAttributesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest, global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse> __Method_RespondQueryTaskCompleted = new grpc::Method<global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest, global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RespondQueryTaskCompleted",
        __Marshaller_temporal_api_workflowservice_v1_RespondQueryTaskCompletedRequest,
        __Marshaller_temporal_api_workflowservice_v1_RespondQueryTaskCompletedResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse> __Method_ResetStickyTaskQueue = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResetStickyTaskQueue",
        __Marshaller_temporal_api_workflowservice_v1_ResetStickyTaskQueueRequest,
        __Marshaller_temporal_api_workflowservice_v1_ResetStickyTaskQueueResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest, global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse> __Method_QueryWorkflow = new grpc::Method<global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest, global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryWorkflow",
        __Marshaller_temporal_api_workflowservice_v1_QueryWorkflowRequest,
        __Marshaller_temporal_api_workflowservice_v1_QueryWorkflowResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse> __Method_DescribeWorkflowExecution = new grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest, global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeWorkflowExecution",
        __Marshaller_temporal_api_workflowservice_v1_DescribeWorkflowExecutionRequest,
        __Marshaller_temporal_api_workflowservice_v1_DescribeWorkflowExecutionResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse> __Method_DescribeTaskQueue = new grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest, global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeTaskQueue",
        __Marshaller_temporal_api_workflowservice_v1_DescribeTaskQueueRequest,
        __Marshaller_temporal_api_workflowservice_v1_DescribeTaskQueueResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest, global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse> __Method_GetClusterInfo = new grpc::Method<global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest, global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetClusterInfo",
        __Marshaller_temporal_api_workflowservice_v1_GetClusterInfoRequest,
        __Marshaller_temporal_api_workflowservice_v1_GetClusterInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest, global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse> __Method_GetSystemInfo = new grpc::Method<global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest, global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSystemInfo",
        __Marshaller_temporal_api_workflowservice_v1_GetSystemInfoRequest,
        __Marshaller_temporal_api_workflowservice_v1_GetSystemInfoResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest, global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse> __Method_ListTaskQueuePartitions = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest, global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListTaskQueuePartitions",
        __Marshaller_temporal_api_workflowservice_v1_ListTaskQueuePartitionsRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListTaskQueuePartitionsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest, global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse> __Method_CreateSchedule = new grpc::Method<global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest, global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateSchedule",
        __Marshaller_temporal_api_workflowservice_v1_CreateScheduleRequest,
        __Marshaller_temporal_api_workflowservice_v1_CreateScheduleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest, global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse> __Method_DescribeSchedule = new grpc::Method<global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest, global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DescribeSchedule",
        __Marshaller_temporal_api_workflowservice_v1_DescribeScheduleRequest,
        __Marshaller_temporal_api_workflowservice_v1_DescribeScheduleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest, global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse> __Method_UpdateSchedule = new grpc::Method<global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest, global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateSchedule",
        __Marshaller_temporal_api_workflowservice_v1_UpdateScheduleRequest,
        __Marshaller_temporal_api_workflowservice_v1_UpdateScheduleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest, global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse> __Method_PatchSchedule = new grpc::Method<global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest, global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PatchSchedule",
        __Marshaller_temporal_api_workflowservice_v1_PatchScheduleRequest,
        __Marshaller_temporal_api_workflowservice_v1_PatchScheduleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest, global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse> __Method_ListScheduleMatchingTimes = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest, global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListScheduleMatchingTimes",
        __Marshaller_temporal_api_workflowservice_v1_ListScheduleMatchingTimesRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListScheduleMatchingTimesResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest, global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse> __Method_DeleteSchedule = new grpc::Method<global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest, global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteSchedule",
        __Marshaller_temporal_api_workflowservice_v1_DeleteScheduleRequest,
        __Marshaller_temporal_api_workflowservice_v1_DeleteScheduleResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest, global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse> __Method_ListSchedules = new grpc::Method<global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest, global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListSchedules",
        __Marshaller_temporal_api_workflowservice_v1_ListSchedulesRequest,
        __Marshaller_temporal_api_workflowservice_v1_ListSchedulesResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Temporal.Api.WorkflowService.V1.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for WorkflowService</summary>
    public partial class WorkflowServiceClient : grpc::ClientBase<WorkflowServiceClient>
    {
      /// <summary>Creates a new client for WorkflowService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkflowServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for WorkflowService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public WorkflowServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkflowServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected WorkflowServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// RegisterNamespace creates a new namespace which can be used as a container for all resources.
      ///
      /// A Namespace is a top level entity within Temporal, and is used as a container for resources
      /// like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
      /// isolation for all resources within the namespace. All resources belongs to exactly one
      /// namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse RegisterNamespace(global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterNamespace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RegisterNamespace creates a new namespace which can be used as a container for all resources.
      ///
      /// A Namespace is a top level entity within Temporal, and is used as a container for resources
      /// like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
      /// isolation for all resources within the namespace. All resources belongs to exactly one
      /// namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse RegisterNamespace(global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterNamespace, null, options, request);
      }
      /// <summary>
      /// RegisterNamespace creates a new namespace which can be used as a container for all resources.
      ///
      /// A Namespace is a top level entity within Temporal, and is used as a container for resources
      /// like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
      /// isolation for all resources within the namespace. All resources belongs to exactly one
      /// namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse> RegisterNamespaceAsync(global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterNamespaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RegisterNamespace creates a new namespace which can be used as a container for all resources.
      ///
      /// A Namespace is a top level entity within Temporal, and is used as a container for resources
      /// like workflow executions, task queues, etc. A Namespace acts as a sandbox and provides
      /// isolation for all resources within the namespace. All resources belongs to exactly one
      /// namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RegisterNamespaceResponse> RegisterNamespaceAsync(global::Temporal.Api.WorkflowService.V1.RegisterNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterNamespace, null, options, request);
      }
      /// <summary>
      /// DescribeNamespace returns the information and configuration for a registered namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse DescribeNamespace(global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeNamespace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DescribeNamespace returns the information and configuration for a registered namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse DescribeNamespace(global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeNamespace, null, options, request);
      }
      /// <summary>
      /// DescribeNamespace returns the information and configuration for a registered namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse> DescribeNamespaceAsync(global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeNamespaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DescribeNamespace returns the information and configuration for a registered namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeNamespaceResponse> DescribeNamespaceAsync(global::Temporal.Api.WorkflowService.V1.DescribeNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeNamespace, null, options, request);
      }
      /// <summary>
      /// ListNamespaces returns the information and configuration for all namespaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse ListNamespaces(global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNamespaces(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListNamespaces returns the information and configuration for all namespaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse ListNamespaces(global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListNamespaces, null, options, request);
      }
      /// <summary>
      /// ListNamespaces returns the information and configuration for all namespaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse> ListNamespacesAsync(global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListNamespacesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListNamespaces returns the information and configuration for all namespaces.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListNamespacesResponse> ListNamespacesAsync(global::Temporal.Api.WorkflowService.V1.ListNamespacesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListNamespaces, null, options, request);
      }
      /// <summary>
      /// UpdateNamespace is used to update the information and configuration of a registered
      /// namespace.
      ///
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse UpdateNamespace(global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNamespace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateNamespace is used to update the information and configuration of a registered
      /// namespace.
      ///
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse UpdateNamespace(global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateNamespace, null, options, request);
      }
      /// <summary>
      /// UpdateNamespace is used to update the information and configuration of a registered
      /// namespace.
      ///
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse> UpdateNamespaceAsync(global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateNamespaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateNamespace is used to update the information and configuration of a registered
      /// namespace.
      ///
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateNamespace RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.UpdateNamespaceResponse> UpdateNamespaceAsync(global::Temporal.Api.WorkflowService.V1.UpdateNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateNamespace, null, options, request);
      }
      /// <summary>
      /// DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
      ///
      /// Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
      /// workflow executions will continue to run on deprecated namespaces.
      /// Deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse DeprecateNamespace(global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeprecateNamespace(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
      ///
      /// Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
      /// workflow executions will continue to run on deprecated namespaces.
      /// Deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse DeprecateNamespace(global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeprecateNamespace, null, options, request);
      }
      /// <summary>
      /// DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
      ///
      /// Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
      /// workflow executions will continue to run on deprecated namespaces.
      /// Deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse> DeprecateNamespaceAsync(global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeprecateNamespaceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeprecateNamespace is used to update the state of a registered namespace to DEPRECATED.
      ///
      /// Once the namespace is deprecated it cannot be used to start new workflow executions. Existing
      /// workflow executions will continue to run on deprecated namespaces.
      /// Deprecated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceResponse> DeprecateNamespaceAsync(global::Temporal.Api.WorkflowService.V1.DeprecateNamespaceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeprecateNamespace, null, options, request);
      }
      /// <summary>
      /// StartWorkflowExecution starts a new workflow execution.
      ///
      /// It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
      /// also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
      /// instance already exists with same workflow id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse StartWorkflowExecution(global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWorkflowExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StartWorkflowExecution starts a new workflow execution.
      ///
      /// It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
      /// also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
      /// instance already exists with same workflow id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse StartWorkflowExecution(global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// StartWorkflowExecution starts a new workflow execution.
      ///
      /// It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
      /// also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
      /// instance already exists with same workflow id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse> StartWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartWorkflowExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// StartWorkflowExecution starts a new workflow execution.
      ///
      /// It will create the execution with a `WORKFLOW_EXECUTION_STARTED` event in its history and
      /// also schedule the first workflow task. Returns `WorkflowExecutionAlreadyStarted`, if an
      /// instance already exists with same workflow id.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionResponse> StartWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.StartWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
      /// `NotFound` if the specified workflow execution is unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse GetWorkflowExecutionHistory(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowExecutionHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
      /// `NotFound` if the specified workflow execution is unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse GetWorkflowExecutionHistory(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowExecutionHistory, null, options, request);
      }
      /// <summary>
      /// GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
      /// `NotFound` if the specified workflow execution is unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse> GetWorkflowExecutionHistoryAsync(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowExecutionHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWorkflowExecutionHistory returns the history of specified workflow execution. Fails with
      /// `NotFound` if the specified workflow execution is unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryResponse> GetWorkflowExecutionHistoryAsync(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowExecutionHistory, null, options, request);
      }
      /// <summary>
      /// GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
      /// order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
      /// unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse GetWorkflowExecutionHistoryReverse(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowExecutionHistoryReverse(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
      /// order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
      /// unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse GetWorkflowExecutionHistoryReverse(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWorkflowExecutionHistoryReverse, null, options, request);
      }
      /// <summary>
      /// GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
      /// order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
      /// unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse> GetWorkflowExecutionHistoryReverseAsync(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetWorkflowExecutionHistoryReverseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetWorkflowExecutionHistoryReverse returns the history of specified workflow execution in reverse 
      /// order (starting from last event). Fails with`NotFound` if the specified workflow execution is 
      /// unknown to the service.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseResponse> GetWorkflowExecutionHistoryReverseAsync(global::Temporal.Api.WorkflowService.V1.GetWorkflowExecutionHistoryReverseRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWorkflowExecutionHistoryReverse, null, options, request);
      }
      /// <summary>
      /// PollWorkflowTaskQueue is called by workers to make progress on workflows.
      ///
      /// A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
      /// tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
      /// processing the task. The service will create a `WorkflowTaskStarted` event in the history for
      /// this task before handing it to the worker.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse PollWorkflowTaskQueue(global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PollWorkflowTaskQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PollWorkflowTaskQueue is called by workers to make progress on workflows.
      ///
      /// A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
      /// tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
      /// processing the task. The service will create a `WorkflowTaskStarted` event in the history for
      /// this task before handing it to the worker.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse PollWorkflowTaskQueue(global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PollWorkflowTaskQueue, null, options, request);
      }
      /// <summary>
      /// PollWorkflowTaskQueue is called by workers to make progress on workflows.
      ///
      /// A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
      /// tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
      /// processing the task. The service will create a `WorkflowTaskStarted` event in the history for
      /// this task before handing it to the worker.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse> PollWorkflowTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PollWorkflowTaskQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PollWorkflowTaskQueue is called by workers to make progress on workflows.
      ///
      /// A WorkflowTask is dispatched to callers for active workflow executions with pending workflow
      /// tasks. The worker is expected to call `RespondWorkflowTaskCompleted` when it is done
      /// processing the task. The service will create a `WorkflowTaskStarted` event in the history for
      /// this task before handing it to the worker.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueResponse> PollWorkflowTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.PollWorkflowTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PollWorkflowTaskQueue, null, options, request);
      }
      /// <summary>
      /// RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
      /// they received from `PollWorkflowTaskQueue`.
      ///
      /// Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
      /// history, along with events corresponding to whatever commands the SDK generated while
      /// executing the task (ex timer started, activity task scheduled, etc).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse RespondWorkflowTaskCompleted(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondWorkflowTaskCompleted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
      /// they received from `PollWorkflowTaskQueue`.
      ///
      /// Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
      /// history, along with events corresponding to whatever commands the SDK generated while
      /// executing the task (ex timer started, activity task scheduled, etc).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse RespondWorkflowTaskCompleted(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondWorkflowTaskCompleted, null, options, request);
      }
      /// <summary>
      /// RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
      /// they received from `PollWorkflowTaskQueue`.
      ///
      /// Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
      /// history, along with events corresponding to whatever commands the SDK generated while
      /// executing the task (ex timer started, activity task scheduled, etc).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse> RespondWorkflowTaskCompletedAsync(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondWorkflowTaskCompletedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondWorkflowTaskCompleted is called by workers to successfully complete workflow tasks
      /// they received from `PollWorkflowTaskQueue`.
      ///
      /// Completing a WorkflowTask will write a `WORKFLOW_TASK_COMPLETED` event to the workflow's
      /// history, along with events corresponding to whatever commands the SDK generated while
      /// executing the task (ex timer started, activity task scheduled, etc).
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedResponse> RespondWorkflowTaskCompletedAsync(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskCompletedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondWorkflowTaskCompleted, null, options, request);
      }
      /// <summary>
      /// RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
      /// failed.
      ///
      /// This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
      /// task will be scheduled. This API can be used to report unhandled failures resulting from
      /// applying the workflow task.
      ///
      /// Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
      /// for consecutive failures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse RespondWorkflowTaskFailed(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondWorkflowTaskFailed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
      /// failed.
      ///
      /// This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
      /// task will be scheduled. This API can be used to report unhandled failures resulting from
      /// applying the workflow task.
      ///
      /// Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
      /// for consecutive failures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse RespondWorkflowTaskFailed(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondWorkflowTaskFailed, null, options, request);
      }
      /// <summary>
      /// RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
      /// failed.
      ///
      /// This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
      /// task will be scheduled. This API can be used to report unhandled failures resulting from
      /// applying the workflow task.
      ///
      /// Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
      /// for consecutive failures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse> RespondWorkflowTaskFailedAsync(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondWorkflowTaskFailedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondWorkflowTaskFailed is called by workers to indicate the processing of a workflow task
      /// failed.
      ///
      /// This results in a `WORKFLOW_TASK_FAILED` event written to the history, and a new workflow
      /// task will be scheduled. This API can be used to report unhandled failures resulting from
      /// applying the workflow task.
      ///
      /// Temporal will only append first WorkflowTaskFailed event to the history of workflow execution
      /// for consecutive failures.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedResponse> RespondWorkflowTaskFailedAsync(global::Temporal.Api.WorkflowService.V1.RespondWorkflowTaskFailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondWorkflowTaskFailed, null, options, request);
      }
      /// <summary>
      /// PollActivityTaskQueue is called by workers to process activity tasks from a specific task
      /// queue.
      ///
      /// The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
      /// processing the task.
      ///
      /// An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
      /// workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
      /// before the task is dispatched to the worker. The started event, and the final event
      /// (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
      /// written permanently to Workflow execution history when Activity is finished. This is done to
      /// avoid writing many events in the case of a failure/retry loop.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse PollActivityTaskQueue(global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PollActivityTaskQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PollActivityTaskQueue is called by workers to process activity tasks from a specific task
      /// queue.
      ///
      /// The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
      /// processing the task.
      ///
      /// An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
      /// workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
      /// before the task is dispatched to the worker. The started event, and the final event
      /// (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
      /// written permanently to Workflow execution history when Activity is finished. This is done to
      /// avoid writing many events in the case of a failure/retry loop.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse PollActivityTaskQueue(global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PollActivityTaskQueue, null, options, request);
      }
      /// <summary>
      /// PollActivityTaskQueue is called by workers to process activity tasks from a specific task
      /// queue.
      ///
      /// The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
      /// processing the task.
      ///
      /// An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
      /// workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
      /// before the task is dispatched to the worker. The started event, and the final event
      /// (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
      /// written permanently to Workflow execution history when Activity is finished. This is done to
      /// avoid writing many events in the case of a failure/retry loop.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse> PollActivityTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PollActivityTaskQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// PollActivityTaskQueue is called by workers to process activity tasks from a specific task
      /// queue.
      ///
      /// The worker is expected to call one of the `RespondActivityTaskXXX` methods when it is done
      /// processing the task.
      ///
      /// An activity task is dispatched whenever a `SCHEDULE_ACTIVITY_TASK` command is produced during
      /// workflow execution. An in memory `ACTIVITY_TASK_STARTED` event is written to mutable state
      /// before the task is dispatched to the worker. The started event, and the final event
      /// (`ACTIVITY_TASK_COMPLETED` / `ACTIVITY_TASK_FAILED` / `ACTIVITY_TASK_TIMED_OUT`) will both be
      /// written permanently to Workflow execution history when Activity is finished. This is done to
      /// avoid writing many events in the case of a failure/retry loop.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueResponse> PollActivityTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.PollActivityTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PollActivityTaskQueue, null, options, request);
      }
      /// <summary>
      /// RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
      ///
      /// If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
      /// then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
      /// the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
      /// such situations, in that event, the SDK should request cancellation of the activity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse RecordActivityTaskHeartbeat(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordActivityTaskHeartbeat(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
      ///
      /// If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
      /// then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
      /// the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
      /// such situations, in that event, the SDK should request cancellation of the activity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse RecordActivityTaskHeartbeat(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordActivityTaskHeartbeat, null, options, request);
      }
      /// <summary>
      /// RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
      ///
      /// If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
      /// then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
      /// the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
      /// such situations, in that event, the SDK should request cancellation of the activity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse> RecordActivityTaskHeartbeatAsync(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordActivityTaskHeartbeatAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RecordActivityTaskHeartbeat is optionally called by workers while they execute activities.
      ///
      /// If worker fails to heartbeat within the `heartbeat_timeout` interval for the activity task,
      /// then it will be marked as timed out and an `ACTIVITY_TASK_TIMED_OUT` event will be written to
      /// the workflow history. Calling `RecordActivityTaskHeartbeat` will fail with `NotFound` in
      /// such situations, in that event, the SDK should request cancellation of the activity.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatResponse> RecordActivityTaskHeartbeatAsync(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordActivityTaskHeartbeat, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse RecordActivityTaskHeartbeatById(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordActivityTaskHeartbeatById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse RecordActivityTaskHeartbeatById(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RecordActivityTaskHeartbeatById, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse> RecordActivityTaskHeartbeatByIdAsync(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RecordActivityTaskHeartbeatByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskHeartbeat`. This version allows clients to record heartbeats by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdResponse> RecordActivityTaskHeartbeatByIdAsync(global::Temporal.Api.WorkflowService.V1.RecordActivityTaskHeartbeatByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RecordActivityTaskHeartbeatById, null, options, request);
      }
      /// <summary>
      /// RespondActivityTaskCompleted is called by workers when they successfully complete an activity
      /// task.
      ///
      /// This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCompleted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondActivityTaskCompleted is called by workers when they successfully complete an activity
      /// task.
      ///
      /// This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse RespondActivityTaskCompleted(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondActivityTaskCompleted, null, options, request);
      }
      /// <summary>
      /// RespondActivityTaskCompleted is called by workers when they successfully complete an activity
      /// task.
      ///
      /// This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse> RespondActivityTaskCompletedAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCompletedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondActivityTaskCompleted is called by workers when they successfully complete an activity
      /// task.
      ///
      /// This results in a new `ACTIVITY_TASK_COMPLETED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedResponse> RespondActivityTaskCompletedAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondActivityTaskCompleted, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskCompleted`. This version allows clients to record completions by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse RespondActivityTaskCompletedById(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCompletedById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskCompleted`. This version allows clients to record completions by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse RespondActivityTaskCompletedById(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondActivityTaskCompletedById, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskCompleted`. This version allows clients to record completions by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse> RespondActivityTaskCompletedByIdAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCompletedByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskCompleted`. This version allows clients to record completions by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdResponse> RespondActivityTaskCompletedByIdAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCompletedByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondActivityTaskCompletedById, null, options, request);
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
      /// a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
      /// longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse RespondActivityTaskFailed(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskFailed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
      /// a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
      /// longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse RespondActivityTaskFailed(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondActivityTaskFailed, null, options, request);
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
      /// a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
      /// longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse> RespondActivityTaskFailedAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskFailedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_FAILED` event being written to the workflow history and
      /// a new workflow task created for the workflow. Fails with `NotFound` if the task token is no
      /// longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedResponse> RespondActivityTaskFailedAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondActivityTaskFailed, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskFailed`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse RespondActivityTaskFailedById(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskFailedById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskFailed`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse RespondActivityTaskFailedById(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondActivityTaskFailedById, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskFailed`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse> RespondActivityTaskFailedByIdAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskFailedByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskFailed`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdResponse> RespondActivityTaskFailedByIdAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskFailedByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondActivityTaskFailedById, null, options, request);
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse RespondActivityTaskCanceled(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCanceled(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse RespondActivityTaskCanceled(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondActivityTaskCanceled, null, options, request);
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse> RespondActivityTaskCanceledAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCanceledAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondActivityTaskFailed is called by workers when processing an activity task fails.
      ///
      /// This results in a new `ACTIVITY_TASK_CANCELED` event being written to the workflow history
      /// and a new workflow task created for the workflow. Fails with `NotFound` if the task token is
      /// no longer valid due to activity timeout, already being completed, or never having existed.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledResponse> RespondActivityTaskCanceledAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondActivityTaskCanceled, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskCanceled`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse RespondActivityTaskCanceledById(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCanceledById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskCanceled`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse RespondActivityTaskCanceledById(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondActivityTaskCanceledById, null, options, request);
      }
      /// <summary>
      /// See `RecordActivityTaskCanceled`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse> RespondActivityTaskCanceledByIdAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondActivityTaskCanceledByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// See `RecordActivityTaskCanceled`. This version allows clients to record failures by
      /// namespace/workflow id/activity id instead of task token.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "By" is used to indicate request type. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdResponse> RespondActivityTaskCanceledByIdAsync(global::Temporal.Api.WorkflowService.V1.RespondActivityTaskCanceledByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondActivityTaskCanceledById, null, options, request);
      }
      /// <summary>
      /// RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
      /// a workflow execution.
      ///
      /// This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
      /// workflow history and a new workflow task created for the workflow. It returns success if the requested
      /// workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse RequestCancelWorkflowExecution(global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestCancelWorkflowExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
      /// a workflow execution.
      ///
      /// This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
      /// workflow history and a new workflow task created for the workflow. It returns success if the requested
      /// workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse RequestCancelWorkflowExecution(global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RequestCancelWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
      /// a workflow execution.
      ///
      /// This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
      /// workflow history and a new workflow task created for the workflow. It returns success if the requested
      /// workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse> RequestCancelWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RequestCancelWorkflowExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RequestCancelWorkflowExecution is called by workers when they want to request cancellation of
      /// a workflow execution.
      ///
      /// This results in a new `WORKFLOW_EXECUTION_CANCEL_REQUESTED` event being written to the
      /// workflow history and a new workflow task created for the workflow. It returns success if the requested
      /// workflow is already closed. It fails with 'NotFound' if the requested workflow doesn't exist.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionResponse> RequestCancelWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.RequestCancelWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RequestCancelWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// SignalWorkflowExecution is used to send a signal to a running workflow execution.
      ///
      /// This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
      /// task being created for the execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse SignalWorkflowExecution(global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignalWorkflowExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SignalWorkflowExecution is used to send a signal to a running workflow execution.
      ///
      /// This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
      /// task being created for the execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse SignalWorkflowExecution(global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignalWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// SignalWorkflowExecution is used to send a signal to a running workflow execution.
      ///
      /// This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
      /// task being created for the execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse> SignalWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignalWorkflowExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SignalWorkflowExecution is used to send a signal to a running workflow execution.
      ///
      /// This results in a `WORKFLOW_EXECUTION_SIGNALED` event recorded in the history and a workflow
      /// task being created for the execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionResponse> SignalWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.SignalWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignalWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
      /// it isn't yet started.
      ///
      /// If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
      /// and a workflow task is generated.
      ///
      /// If the workflow is not running or not found, then the workflow is created with
      /// `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
      /// workflow task is generated.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse SignalWithStartWorkflowExecution(global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignalWithStartWorkflowExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
      /// it isn't yet started.
      ///
      /// If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
      /// and a workflow task is generated.
      ///
      /// If the workflow is not running or not found, then the workflow is created with
      /// `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
      /// workflow task is generated.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse SignalWithStartWorkflowExecution(global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignalWithStartWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
      /// it isn't yet started.
      ///
      /// If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
      /// and a workflow task is generated.
      ///
      /// If the workflow is not running or not found, then the workflow is created with
      /// `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
      /// workflow task is generated.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse> SignalWithStartWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SignalWithStartWorkflowExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SignalWithStartWorkflowExecution is used to ensure a signal is sent to a workflow, even if
      /// it isn't yet started.
      ///
      /// If the workflow is running, a `WORKFLOW_EXECUTION_SIGNALED` event is recorded in the history
      /// and a workflow task is generated.
      ///
      /// If the workflow is not running or not found, then the workflow is created with
      /// `WORKFLOW_EXECUTION_STARTED` and `WORKFLOW_EXECUTION_SIGNALED` events in its history, and a
      /// workflow task is generated.
      ///
      /// (-- api-linter: core::0136::prepositions=disabled
      ///     aip.dev/not-precedent: "With" is used to indicate combined operation. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionResponse> SignalWithStartWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.SignalWithStartWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignalWithStartWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// ResetWorkflowExecution will reset an existing workflow execution to a specified
      /// `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
      /// execution instance.
      /// TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse ResetWorkflowExecution(global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetWorkflowExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResetWorkflowExecution will reset an existing workflow execution to a specified
      /// `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
      /// execution instance.
      /// TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse ResetWorkflowExecution(global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// ResetWorkflowExecution will reset an existing workflow execution to a specified
      /// `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
      /// execution instance.
      /// TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse> ResetWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetWorkflowExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResetWorkflowExecution will reset an existing workflow execution to a specified
      /// `WORKFLOW_TASK_COMPLETED` event (exclusive). It will immediately terminate the current
      /// execution instance.
      /// TODO: Does exclusive here mean *just* the completed event, or also WFT started? Otherwise the task is doomed to time out?
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionResponse> ResetWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.ResetWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// TerminateWorkflowExecution terminates an existing workflow execution by recording a
      /// `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
      /// execution instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse TerminateWorkflowExecution(global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateWorkflowExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TerminateWorkflowExecution terminates an existing workflow execution by recording a
      /// `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
      /// execution instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse TerminateWorkflowExecution(global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TerminateWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// TerminateWorkflowExecution terminates an existing workflow execution by recording a
      /// `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
      /// execution instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse> TerminateWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TerminateWorkflowExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TerminateWorkflowExecution terminates an existing workflow execution by recording a
      /// `WORKFLOW_EXECUTION_TERMINATED` event in the history and immediately terminating the
      /// execution instance.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionResponse> TerminateWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.TerminateWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TerminateWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse ListOpenWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOpenWorkflowExecutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse ListOpenWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListOpenWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse> ListOpenWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListOpenWorkflowExecutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListOpenWorkflowExecutions is a visibility API to list the open executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsResponse> ListOpenWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListOpenWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListOpenWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse ListClosedWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListClosedWorkflowExecutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse ListClosedWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListClosedWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse> ListClosedWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListClosedWorkflowExecutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListClosedWorkflowExecutions is a visibility API to list the closed executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsResponse> ListClosedWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListClosedWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListClosedWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse ListWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowExecutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse ListWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse> ListWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListWorkflowExecutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListWorkflowExecutions is a visibility API to list workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsResponse> ListWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse ListArchivedWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListArchivedWorkflowExecutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse ListArchivedWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListArchivedWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse> ListArchivedWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListArchivedWorkflowExecutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ListArchivedWorkflowExecutions is a visibility API to list archived workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsResponse> ListArchivedWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ListArchivedWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListArchivedWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse ScanWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanWorkflowExecutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse ScanWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ScanWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse> ScanWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ScanWorkflowExecutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ScanWorkflowExecutions is a visibility API to list large amount of workflow executions in a specific namespace without order.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsResponse> ScanWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.ScanWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ScanWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse CountWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CountWorkflowExecutions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse CountWorkflowExecutions(global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CountWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse> CountWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CountWorkflowExecutionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CountWorkflowExecutions is a visibility API to count of workflow executions in a specific namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsResponse> CountWorkflowExecutionsAsync(global::Temporal.Api.WorkflowService.V1.CountWorkflowExecutionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CountWorkflowExecutions, null, options, request);
      }
      /// <summary>
      /// GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse GetSearchAttributes(global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchAttributes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse GetSearchAttributes(global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSearchAttributes, null, options, request);
      }
      /// <summary>
      /// GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse> GetSearchAttributesAsync(global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSearchAttributesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSearchAttributes is a visibility API to get all legal keys that could be used in list APIs
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetSearchAttributesResponse> GetSearchAttributesAsync(global::Temporal.Api.WorkflowService.V1.GetSearchAttributesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSearchAttributes, null, options, request);
      }
      /// <summary>
      /// RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
      /// the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
      ///
      /// Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
      /// the query result a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse RespondQueryTaskCompleted(global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondQueryTaskCompleted(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
      /// the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
      ///
      /// Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
      /// the query result a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse RespondQueryTaskCompleted(global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RespondQueryTaskCompleted, null, options, request);
      }
      /// <summary>
      /// RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
      /// the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
      ///
      /// Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
      /// the query result a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse> RespondQueryTaskCompletedAsync(global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RespondQueryTaskCompletedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RespondQueryTaskCompleted is called by workers to complete queries which were delivered on
      /// the `query` (not `queries`) field of a `PollWorkflowTaskQueueResponse`.
      ///
      /// Completing the query will unblock the corresponding client call to `QueryWorkflow` and return
      /// the query result a response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedResponse> RespondQueryTaskCompletedAsync(global::Temporal.Api.WorkflowService.V1.RespondQueryTaskCompletedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RespondQueryTaskCompleted, null, options, request);
      }
      /// <summary>
      /// ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
      /// a given workflow. This is prudent for workers to perform if a workflow has been paged out of
      /// their cache.
      ///
      /// Things cleared are:
      /// 1. StickyTaskQueue
      /// 2. StickyScheduleToStartTimeout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse ResetStickyTaskQueue(global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetStickyTaskQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
      /// a given workflow. This is prudent for workers to perform if a workflow has been paged out of
      /// their cache.
      ///
      /// Things cleared are:
      /// 1. StickyTaskQueue
      /// 2. StickyScheduleToStartTimeout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse ResetStickyTaskQueue(global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResetStickyTaskQueue, null, options, request);
      }
      /// <summary>
      /// ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
      /// a given workflow. This is prudent for workers to perform if a workflow has been paged out of
      /// their cache.
      ///
      /// Things cleared are:
      /// 1. StickyTaskQueue
      /// 2. StickyScheduleToStartTimeout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse> ResetStickyTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResetStickyTaskQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ResetStickyTaskQueue resets the sticky task queue related information in the mutable state of
      /// a given workflow. This is prudent for workers to perform if a workflow has been paged out of
      /// their cache.
      ///
      /// Things cleared are:
      /// 1. StickyTaskQueue
      /// 2. StickyScheduleToStartTimeout
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueResponse> ResetStickyTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.ResetStickyTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResetStickyTaskQueue, null, options, request);
      }
      /// <summary>
      /// QueryWorkflow requests a query be executed for a specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse QueryWorkflow(global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryWorkflow(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QueryWorkflow requests a query be executed for a specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse QueryWorkflow(global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryWorkflow, null, options, request);
      }
      /// <summary>
      /// QueryWorkflow requests a query be executed for a specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse> QueryWorkflowAsync(global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryWorkflowAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// QueryWorkflow requests a query be executed for a specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.QueryWorkflowResponse> QueryWorkflowAsync(global::Temporal.Api.WorkflowService.V1.QueryWorkflowRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryWorkflow, null, options, request);
      }
      /// <summary>
      /// DescribeWorkflowExecution returns information about the specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse DescribeWorkflowExecution(global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeWorkflowExecution(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DescribeWorkflowExecution returns information about the specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse DescribeWorkflowExecution(global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// DescribeWorkflowExecution returns information about the specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse> DescribeWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeWorkflowExecutionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DescribeWorkflowExecution returns information about the specified workflow execution.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionResponse> DescribeWorkflowExecutionAsync(global::Temporal.Api.WorkflowService.V1.DescribeWorkflowExecutionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeWorkflowExecution, null, options, request);
      }
      /// <summary>
      /// DescribeTaskQueue returns information about the target task queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse DescribeTaskQueue(global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeTaskQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DescribeTaskQueue returns information about the target task queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse DescribeTaskQueue(global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeTaskQueue, null, options, request);
      }
      /// <summary>
      /// DescribeTaskQueue returns information about the target task queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse> DescribeTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeTaskQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DescribeTaskQueue returns information about the target task queue.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueResponse> DescribeTaskQueueAsync(global::Temporal.Api.WorkflowService.V1.DescribeTaskQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeTaskQueue, null, options, request);
      }
      /// <summary>
      /// GetClusterInfo returns information about temporal cluster
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse GetClusterInfo(global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClusterInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetClusterInfo returns information about temporal cluster
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse GetClusterInfo(global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetClusterInfo, null, options, request);
      }
      /// <summary>
      /// GetClusterInfo returns information about temporal cluster
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse> GetClusterInfoAsync(global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetClusterInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetClusterInfo returns information about temporal cluster
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetClusterInfoResponse> GetClusterInfoAsync(global::Temporal.Api.WorkflowService.V1.GetClusterInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetClusterInfo, null, options, request);
      }
      /// <summary>
      /// GetSystemInfo returns information about the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse GetSystemInfo(global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSystemInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSystemInfo returns information about the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse GetSystemInfo(global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSystemInfo, null, options, request);
      }
      /// <summary>
      /// GetSystemInfo returns information about the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse> GetSystemInfoAsync(global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetSystemInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetSystemInfo returns information about the system.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.GetSystemInfoResponse> GetSystemInfoAsync(global::Temporal.Api.WorkflowService.V1.GetSystemInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSystemInfo, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse ListTaskQueuePartitions(global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTaskQueuePartitions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse ListTaskQueuePartitions(global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListTaskQueuePartitions, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse> ListTaskQueuePartitionsAsync(global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListTaskQueuePartitionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsResponse> ListTaskQueuePartitionsAsync(global::Temporal.Api.WorkflowService.V1.ListTaskQueuePartitionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListTaskQueuePartitions, null, options, request);
      }
      /// <summary>
      /// Creates a new schedule.
      /// (-- api-linter: core::0133::method-signature=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::response-message-name=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::http-uri-parent=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse CreateSchedule(global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new schedule.
      /// (-- api-linter: core::0133::method-signature=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::response-message-name=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::http-uri-parent=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse CreateSchedule(global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateSchedule, null, options, request);
      }
      /// <summary>
      /// Creates a new schedule.
      /// (-- api-linter: core::0133::method-signature=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::response-message-name=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::http-uri-parent=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse> CreateScheduleAsync(global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Creates a new schedule.
      /// (-- api-linter: core::0133::method-signature=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::response-message-name=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0133::http-uri-parent=disabled
      ///     aip.dev/not-precedent: CreateSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.CreateScheduleResponse> CreateScheduleAsync(global::Temporal.Api.WorkflowService.V1.CreateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateSchedule, null, options, request);
      }
      /// <summary>
      /// Returns the schedule description and current state of an existing schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse DescribeSchedule(global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the schedule description and current state of an existing schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse DescribeSchedule(global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DescribeSchedule, null, options, request);
      }
      /// <summary>
      /// Returns the schedule description and current state of an existing schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse> DescribeScheduleAsync(global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DescribeScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Returns the schedule description and current state of an existing schedule.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DescribeScheduleResponse> DescribeScheduleAsync(global::Temporal.Api.WorkflowService.V1.DescribeScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DescribeSchedule, null, options, request);
      }
      /// <summary>
      /// Changes the configuration or state of an existing schedule.
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse UpdateSchedule(global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the configuration or state of an existing schedule.
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse UpdateSchedule(global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateSchedule, null, options, request);
      }
      /// <summary>
      /// Changes the configuration or state of an existing schedule.
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse> UpdateScheduleAsync(global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Changes the configuration or state of an existing schedule.
      /// (-- api-linter: core::0134::response-message-name=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// (-- api-linter: core::0134::method-signature=disabled
      ///     aip.dev/not-precedent: UpdateSchedule RPC doesn't follow Google API format. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.UpdateScheduleResponse> UpdateScheduleAsync(global::Temporal.Api.WorkflowService.V1.UpdateScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateSchedule, null, options, request);
      }
      /// <summary>
      /// Makes a specific change to a schedule or triggers an immediate action.
      /// (-- api-linter: core::0134::synonyms=disabled
      ///     aip.dev/not-precedent: we have both patch and update. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse PatchSchedule(global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Makes a specific change to a schedule or triggers an immediate action.
      /// (-- api-linter: core::0134::synonyms=disabled
      ///     aip.dev/not-precedent: we have both patch and update. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse PatchSchedule(global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PatchSchedule, null, options, request);
      }
      /// <summary>
      /// Makes a specific change to a schedule or triggers an immediate action.
      /// (-- api-linter: core::0134::synonyms=disabled
      ///     aip.dev/not-precedent: we have both patch and update. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse> PatchScheduleAsync(global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PatchScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Makes a specific change to a schedule or triggers an immediate action.
      /// (-- api-linter: core::0134::synonyms=disabled
      ///     aip.dev/not-precedent: we have both patch and update. --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.PatchScheduleResponse> PatchScheduleAsync(global::Temporal.Api.WorkflowService.V1.PatchScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PatchSchedule, null, options, request);
      }
      /// <summary>
      /// Lists matching times within a range.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse ListScheduleMatchingTimes(global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScheduleMatchingTimes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists matching times within a range.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse ListScheduleMatchingTimes(global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListScheduleMatchingTimes, null, options, request);
      }
      /// <summary>
      /// Lists matching times within a range.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse> ListScheduleMatchingTimesAsync(global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListScheduleMatchingTimesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Lists matching times within a range.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesResponse> ListScheduleMatchingTimesAsync(global::Temporal.Api.WorkflowService.V1.ListScheduleMatchingTimesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListScheduleMatchingTimes, null, options, request);
      }
      /// <summary>
      /// Deletes a schedule, removing it from the system.
      /// (-- api-linter: core::0135::method-signature=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0135::response-message-name=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse DeleteSchedule(global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a schedule, removing it from the system.
      /// (-- api-linter: core::0135::method-signature=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0135::response-message-name=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse DeleteSchedule(global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteSchedule, null, options, request);
      }
      /// <summary>
      /// Deletes a schedule, removing it from the system.
      /// (-- api-linter: core::0135::method-signature=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0135::response-message-name=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse> DeleteScheduleAsync(global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Deletes a schedule, removing it from the system.
      /// (-- api-linter: core::0135::method-signature=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// (-- api-linter: core::0135::response-message-name=disabled
      ///     aip.dev/not-precedent: DeleteSchedule doesn't follow Google API format --)
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.DeleteScheduleResponse> DeleteScheduleAsync(global::Temporal.Api.WorkflowService.V1.DeleteScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteSchedule, null, options, request);
      }
      /// <summary>
      /// List all schedules in a namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse ListSchedules(global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSchedules(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all schedules in a namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse ListSchedules(global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListSchedules, null, options, request);
      }
      /// <summary>
      /// List all schedules in a namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse> ListSchedulesAsync(global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListSchedulesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// List all schedules in a namespace.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Temporal.Api.WorkflowService.V1.ListSchedulesResponse> ListSchedulesAsync(global::Temporal.Api.WorkflowService.V1.ListSchedulesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListSchedules, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override WorkflowServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new WorkflowServiceClient(configuration);
      }
    }

  }
}
#endregion
