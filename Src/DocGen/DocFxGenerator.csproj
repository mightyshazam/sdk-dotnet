<Project Sdk="Microsoft.NET.Sdk">

<PropertyGroup>    
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <!-- When building from the command line, specify the `BuildApiRefDocs` (=`true` or `false`) property to control whether        -->
    <!-- documentation needs to be built.                                                                                           -->
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->

    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
    <!-- If `BuildApiRefDocs` is not specified, we will fall back to the the value of `BuildDocFxDefault`, which is defined below.  -->
    <!-- Normally, the default is `false` (we will NOT build the Ref Docs), becasue it takes a relatively long time to build the    -->
    <!-- docs and we want to only do that on demand. However, you can change the default if required.                               -->
    <!-- Note that even if Doc buildig is turned on, it will only happen in the right environment (Windown/Net6). See below for     -->
    <!-- some details on that.                                                                                                      -->

    <BuildDocFxDefault>false</BuildDocFxDefault>    
    <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->  
  </PropertyGroup>

  <PropertyGroup>
    <!--
    The DocFcx scripts and executables we use are intended for Windows only. On other platforms we skip API Ref Docs generation.
    -->
    <BuildDocFx Condition="'$(OS)' != 'Windows_NT'">false</BuildDocFx>
  </PropertyGroup>

  <PropertyGroup>
    <!--
    We build docs for all target frameworks defined in the upper folder `Directory.Build.props`.
    (Should be: `net462;netcoreapp3.1;net6.0`). However, for building the docs, we only need one target.
    It does not matter which - we will pick one arbitrary. This project file will call a script. That
    script, in turn, will build the docs for each of the multiple target frameworks.
    When building locally, MSBuild respects the `TargetFrameworks` setting. So clearing that and setting
    a single `TargetFramework` would ensure that this project only builds for one target. However, in
    the CI we build this project as a part of the entire solution while explicitly specifying each of
    the supported target frameworks to the build. So we must not fail the build for any of them. Thus,
    we are "supporting" all of the targets, but we opt out of actually generating any docs for any
    target, except `net6.0` (this choice is arbitrary, as long as we pick a signle target).
    -->
    <BuildDocFx Condition="'$(TargetFramework)' != 'net6.0'">false</BuildDocFx>
  </PropertyGroup>
  
  <!--
    Note that the list of target frameworks for API Ref Doc generation is located WITHIN the script.
    That list should match what we support.
  -->

  <PropertyGroup>    
    <!--
    If something around the environment or the targets dissallow `BuildDocFx` from being True,
    then it was already set ty False above. Otherwise we init it now:
    If `BuildApiRefDocs` was specified to the command line, we use that value.
    Otherwise we use `BuildDocFxDefault`.
    -->
    <BuildDocFx Condition="'$(BuildDocFx)' == '' And '$(BuildApiRefDocs)' != ''">$(BuildApiRefDocs)</BuildDocFx>
    <BuildDocFx Condition="'$(BuildDocFx)' == ''">$(BuildDocFxDefault)</BuildDocFx>    
  </PropertyGroup>
  
  <ItemGroup>
    <!-- Clear the default compliation items set by higher level Directories: -->
    <Compile Remove="$(SharedSrcBaseDir)\System.Runtime.CompilerServices\internal\IsExternalInit.cs" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Set `DocFxCleanBuildDir` to `false` to avoid deleting everythng in the $(DocFxBuildRoot) before building. -->
    <DocFxCleanBuildDir>true</DocFxCleanBuildDir>
  </PropertyGroup>

  <PropertyGroup>
    
    <!-- Prefix for diagnostic messages on build output console: -->
    <DocFxGeneratorPrefix>DocFx Generator</DocFxGeneratorPrefix>
    
    <!-- Location of the documentation files, articles and the-like in the repo: -->
    <DocFilesRoot>$(EnlistmentRoot)\Doc</DocFilesRoot>

    <!-- Working directory / output directory for DocFx (located in the overall build output directory): -->
    <DocFxBuildRoot>$(BuildOutputRoot)\DocFx</DocFxBuildRoot>
    
    <!-- Directory where the DocFx binary executable will be placed (located in the overall build output directory): -->
    <DocFxBinExeDir>$(BuildOutputRoot)\DocFx.Bin</DocFxBinExeDir>

    <!-- LogFx log details level: -->
    <!-- (Acceptable values are: `Verbose`, `Info`, `Warning`, `Error`.) -->
    <DocFxLogLevel>Info</DocFxLogLevel>

  </PropertyGroup>  
  
  <ItemGroup>
    <!--
    We need to make sure that all projects for which we may be generating the docs are built before we start creating the docs.
    -->
    <ProjectReference Include="$(SdkSrcBaseDir)\Api.Client.ManagedGrpc\Temporal.Api.Client.ManagedGrpc.csproj" />  
    <ProjectReference Include="$(SdkSrcBaseDir)\Common\Temporal.Sdk.Common.csproj" />
    <ProjectReference Include="$(SdkSrcBaseDir)\WorkflowClient\Temporal.Sdk.WorkflowClient.csproj" />
  </ItemGroup>


  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  <ItemGroup>
    <!--
    These files must be be copied into the DocFx Build Root folder before invoking DocFx:
    -->    
    <InternalItemToDocFxBuildRoot Include="DocFx-Config-Files/**/*" />
    <InternalItemToDocFxBuildRoot Include="Distributed-Docs-Files/**/*" />
    <InternalItemToDocFxBuildRoot Include="CreateRefDocZip.bat" />
  </ItemGroup>

  <ItemGroup>
    <!--
    All files in the `$(EnlistmentRoot)\Doc` folder must be copied into the DocFx working / binary folder before we build the docs:
    -->    
    <ExternalItemToDocFxBuildRoot Include="$(DocFilesRoot)/**/*" />
    <UnpublishedDocItems Include="$(DocFilesRoot)/**/Drafts/**/*" />
    <ExternalItemToDocFxBuildRoot Remove="@(UnpublishedDocItems)" />
    
    <!-- Display these files as a group in VS Solution Explorer: -->
    <None Include="@(ExternalItemToDocFxBuildRoot)"
          Link="_Repo\Doc (Published)\%(RecursiveDir)%(Filename)%(Extension)"
          Visible="true" />

    <None Include="@(UnpublishedDocItems)"
          Link="_Repo\Doc (Unpublished)\%(RecursiveDir)%(Filename)%(Extension)"
          Visible="true" />
  
  </ItemGroup>

  <PropertyGroup>
    <DeployedFileMetadataFile>$(DocFxBuildRoot)\FileMetadata.json</DeployedFileMetadataFile>
  </PropertyGroup>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  <Target Name="DocFxGenerator_PrintDetails_Common"
          BeforeTargets="Build">
    <!--
    This target prints diagnostic info to the build log.
    -->
    <PropertyGroup>
      <BuildApiRefDocsUsageMsg>
[$(DocFxGeneratorPrefix)]    Project file: &quot;$(MSBuildProjectFullPath)&quot;.
[$(DocFxGeneratorPrefix)]    *!* Specify the `BuildApiRefDocs` property to the Build to set whether API Reference Docs should be generated.
[$(DocFxGeneratorPrefix)]    *!* By default this is off, since it can take a long time.
[$(DocFxGeneratorPrefix)]    *!*
[$(DocFxGeneratorPrefix)]    *!* For example, on the command line you can specify:
[$(DocFxGeneratorPrefix)]    *!*   > dotnet build -f net6.0 -c Debug Temporal.Sdk.sln /p:BuildApiRefDocs=True
[$(DocFxGeneratorPrefix)]    *!* 
[$(DocFxGeneratorPrefix)]    *!* Note, that even if doc generation is requested, it can only occur in the right environment (Win/Net6).
[$(DocFxGeneratorPrefix)]    *!* Check the value of `BuildDocFx` (displayed below) to see whether the docs will actually be generated.
[$(DocFxGeneratorPrefix)]    *!*
[$(DocFxGeneratorPrefix)]    *!* BuildApiRefDocs:   &quot;$(BuildApiRefDocs)&quot;.
[$(DocFxGeneratorPrefix)]    *!* BuildDocFx:        &quot;$(BuildDocFx)&quot;.
[$(DocFxGeneratorPrefix)]    *!* TargetFramework:   &quot;$(TargetFramework)&quot;.
[$(DocFxGeneratorPrefix)]    *!* OS:                &quot;$(OS)&quot;.
[$(DocFxGeneratorPrefix)]    *!* BuildDocFxDefault: &quot;$(BuildDocFxDefault)&quot;.
      </BuildApiRefDocsUsageMsg>
    </PropertyGroup>
    
    <Message Text="$(BuildApiRefDocsUsageMsg)" Importance="high" />
    <Message Text=" " Importance="high" />
  </Target>

  <Target Name="DocFxGenerator_PrintDetails_DONTBuildDocFx"
          AfterTargets="DocFxGenerator_PrintDetails_Common"
          Condition="'$(BuildDocFx)' != 'true'">
    <!--
    This target prints diagnostic info to the build log.
    -->
    <Message Text="[$(DocFxGeneratorPrefix)]    BuildDocFx:        &quot;$(BuildDocFx)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]      &gt;&gt;&gt; Main project functionality will NOT be invoked." Importance="high" />
    <Message Text=" " Importance="high" />
  </Target>

  <Target Name="DocFxGenerator_PrintDetails_DOBuildDocFx"
          AfterTargets="DocFxGenerator_PrintDetails_Common"
          Condition="'$(BuildDocFx)' == 'true'">
    <!--
    This target prints diagnostic info to the build log.
    -->
    <Message Text="[$(DocFxGeneratorPrefix)]    BuildDocFx:        &quot;$(BuildDocFx)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]      &gt;&gt;&gt; Main project functionality WILL be invoked." Importance="high" />

    <Message Text="[$(DocFxGeneratorPrefix)]    DocFilesRoot:      &quot;$(DocFilesRoot)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    DocFxBuildRoot:    &quot;$(DocFxBuildRoot)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    DocFxBinExeDir:    &quot;$(DocFxBinExeDir)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    DocFxLogLevel:     &quot;$(DocFxLogLevel)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    Timestamp:         $([System.DateTime]::Now.ToString('HH:mm:ss.fffff'))." Importance="high" />
    <Message Text=" " Importance="high" />
  </Target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  <Target Name="DocFxGenerator_CopyFilesBuildDir"
          Condition="'$(BuildDocFx)' == 'true'"
          AfterTargets="DocFxGenerator_PrintDetails_DOBuildDocFx;DocFxGenerator_PrintDetails_DONTBuildDocFx"
          BeforeTargets="Build">
    <!--
    This target copies the necessary files to the DocFx Build Root folder and subfolders before invoking DocFx.
    -->
    
    <!-- Clean the target directory: -->

    <PropertyGroup>
      <!--
      We want to delete / clean everything in $(DocFxBuildRoot), but if something went wrong and $(DocFxBuildRoot) is
      not populated correctly, we could delete too much. In the worst case, it points to the root directory and we delete
      the entire file system. To protect, we check whether it ends in what we excpect it to end.
      `$(DocFxBuildRoot)` should be `$(BuildOutputRoot)\DocFx`, where `$(BuildOutputRoot)` is a global path ending in `_build`.
      If the values of those properties are changed where they are defined, we will need to update this check here.
      This is better than to delete all files on a disk by mistake.
      -->
      <ExpectedDocFxBuildRootSuffix>_build\DocFx</ExpectedDocFxBuildRootSuffix>
      <SafeToCleanDocFxBuildRoot Condition="$(DocFxBuildRoot.EndsWith($(ExpectedDocFxBuildRootSuffix))) == true">true</SafeToCleanDocFxBuildRoot>
      <SafeToCleanDocFxBuildRoot Condition="$(DocFxBuildRoot.EndsWith($(ExpectedDocFxBuildRootSuffix))) == false">false</SafeToCleanDocFxBuildRoot>
    </PropertyGroup>
    
    <!--
    We could just apply RemoveDir to $(DocFxBuildRoot), but it may fail if we are doing local development and the folder is open by some app or console.
    So we delete all files in $(DocFxBuildRoot), then attempt to remove the dir, but if failing to remove it should be benign beyond cosmetic aspects.
    -->

    <ItemGroup Condition="'$(SafeToCleanDocFxBuildRoot)' == 'true'">
      <DocFxBuildFilesToClean Include="$(DocFxBuildRoot)\**\*.*" />
    </ItemGroup>

    <PropertyGroup>
      <DoCleanDocFxBuildRoot>false</DoCleanDocFxBuildRoot>
      <DoCleanDocFxBuildRoot Condition="'$(DocFxCleanBuildDir)' != 'false' And '$(SafeToCleanDocFxBuildRoot)' == 'true'">true</DoCleanDocFxBuildRoot>
    </PropertyGroup>

    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: `DocFxBuildRoot`=&quot;$(DocFxBuildRoot)&quot;." Importance="high" />
   
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: Will NOT clean `DocFxBuildRoot`, becasue it is not formed as expected (`SafeToCleanDocFxBuildRoot`=&quot;$(SafeToCleanDocFxBuildRoot)&quot;)." Importance="high"
             Condition="'$(SafeToCleanDocFxBuildRoot)' != 'true'" />

    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: DoCleanDocFxBuildRoot = ( (DocFxCleanBuildDir != False) AND (SafeToCleanDocFxBuildRoot == True))." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    *!* Use the `DocFxCleanBuildDir` property to control whether the `DocFxBuildRoot` will be cleaned." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir:   - DocFxCleanBuildDir=&quot;$(DocFxCleanBuildDir)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir:   - SafeToCleanDocFxBuildRoot=&quot;$(SafeToCleanDocFxBuildRoot)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: =&gt; DoCleanDocFxBuildRoot=&quot;$(DoCleanDocFxBuildRoot)&quot; " Importance="high" />
             
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: Will delete @(DocFxBuildFilesToClean-&gt;Count()) files to clean `DocFxBuildRoot`." Importance="high"
             Condition="'$(DoCleanDocFxBuildRoot)' == 'true'" />
    
    <Delete Condition="'$(DoCleanDocFxBuildRoot)' == 'true'"
            Files="@(DocFxBuildFilesToClean)">
            <Output TaskParameter="DeletedFiles"
                    ItemName="CleanedDocFxBuildFiles" />
    </Delete>
    
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: CleanedDocFxBuildFiles-&gt;Count()=&quot;@(CleanedDocFxBuildFiles-&gt;Count())&quot;." Importance="high" />
    
    <!-- Uncomment this line to see all deleted files. There might be a lot. -->
    <!--
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: CleanedDocFxBuildFiles=&quot;@(CleanedDocFxBuildFiles)&quot;." Importance="high" />
    -->
    
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: Will attempt to remove the dir `DocFxBuildRoot`. It may fail if the dir is open locally. That should be benign." Importance="high" 
             Condition="'$(DoCleanDocFxBuildRoot)' == 'true'" />
    
    <RemoveDir Condition="'$(DoCleanDocFxBuildRoot)' == 'true'"
               Directories="$(DocFxBuildRoot)"
               ContinueOnError="WarnAndContinue">
               <Output TaskParameter="RemovedDirectories"
                       ItemName="RemovedDocFxBuildRootDirs" />
    </RemoveDir>
    
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: RemovedDocFxBuildRootDirs{@(RemovedDocFxBuildRootDirs-&gt;Count())}=&quot;@(RemovedDocFxBuildRootDirs)&quot;." Importance="high" />
        
    <Message Text=" " Importance="high" />
    
    <!-- Target directory cleaned. Now copy files. -->
    
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: Will now copy InternalItemToDocFxBuildRoot{@(InternalItemToDocFxBuildRoot-&gt;Count())} files to `DocFxBuildRoot`." Importance="high" />

    <Copy SourceFiles="@(InternalItemToDocFxBuildRoot)"
          DestinationFiles="$(DocFxBuildRoot)\%(RecursiveDir)%(Filename)%(Extension)"
          SkipUnchangedFiles="false"
          Retries="4"
          RetryDelayMilliseconds="500">      
          <Output TaskParameter="CopiedFiles"
                  ItemName="InternalsCopied" />
    </Copy>
    
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: Will now copy ExternalItemToDocFxBuildRoot{@(ExternalItemToDocFxBuildRoot-&gt;Count())} files to `DocFxBuildRoot`." Importance="high" />

    <Copy SourceFiles="@(ExternalItemToDocFxBuildRoot)"
          DestinationFiles="$(DocFxBuildRoot)\%(RecursiveDir)%(Filename)%(Extension)"
          SkipUnchangedFiles="false"
          Retries="4"
          RetryDelayMilliseconds="500">
          <Output TaskParameter="CopiedFiles"
                  ItemName="ExternalsCopied" />
    </Copy>
    
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: InternalsCopied{@(InternalsCopied-&gt;Count())}=&quot;@(InternalsCopied)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CopyFilesBuildDir: ExternalsCopied{@(ExternalsCopied-&gt;Count())}=&quot;@(ExternalsCopied)&quot;." Importance="high" />
    <Message Text=" " Importance="high" />
  </Target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  <Import Project="$(SdkSrcBaseDir)\ProductVersion.props" />
  
  <Target Name="DocFxGenerator_ApplyFileMetadataFileTemplate"
          Condition="'$(BuildDocFx)' == 'true'"
          AfterTargets="DocFxGenerator_CopyFilesBuildDir"
          BeforeTargets="Build">
    
    <Message Text="[$(DocFxGeneratorPrefix)]    ApplyFileMetadataFileTemplate: Replacing &quot;{AssemblyVersionForDocFx}&quot; with &quot;$(InformationalVersion)&quot; in &quot;$(DeployedFileMetadataFile)&quot;." Importance="high" />
    
    <WriteLinesToFile File="$(DeployedFileMetadataFile)"
                      Lines="$([System.IO.File]::ReadAllText('$(DeployedFileMetadataFile)').Replace('{AssemblyVersionForDocFx}','$(InformationalVersion)'))"
                      Overwrite="true"/>

  </Target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->

  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  <Target Name="DocFxGenerator_InvokeDocFx"
          Condition="'$(BuildDocFx)' == 'true'"
          AfterTargets="DocFxGenerator_CopyFilesBuildDir;Build">
    
    <PropertyGroup>
      <DocFxScriptCommand>$(MSBuildProjectDirectory)\GenerateApiRefDocs.bat $(DocFxBuildRoot) $(DocFxBinExeDir) $(DocFxLogLevel)</DocFxScriptCommand>
    </PropertyGroup>
    
    <Message Text="[$(DocFxGeneratorPrefix)]    InvokeDocFx:       Timestamp: $([System.DateTime]::Now.ToString('HH:mm:ss.fffff'))." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    InvokeDocFx:       DocFxScriptCommand: &quot;$(DocFxScriptCommand)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    InvokeDocFx:       Calling DocFx now." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    InvokeDocFx:       =========== =========== =========== =========== =========== =========== =========== =========== " Importance="high" />
    
    <Exec Command="$(DocFxScriptCommand)"></Exec>
    
    <Message Text="[$(DocFxGeneratorPrefix)]    InvokeDocFx:       =========== =========== =========== =========== =========== =========== =========== =========== " Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    InvokeDocFx:       DocFx completed." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    InvokeDocFx:       Timestamp: $([System.DateTime]::Now.ToString('HH:mm:ss.fffff'))." Importance="high" />
    <Message Text=" " Importance="high" />
  
  </Target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  <Target Name="DocFxGenerator_CleanObjDirs"
          Condition="'$(BuildDocFx)' == 'true'"
          AfterTargets="Build;DocFxGenerator_InvokeDocFx">
    <!--
    DocFx is too dumb to avoid polluting source folders.
    So we have to clean up after it. Since we are deleting folders in the source directories, let's play is safe
    and list them explicitly rather than trying to discover them.
    ! Remember to add here every project for which we generate API Docs, so that the respective `obj` folder can be cleaned up !
    -->
    <ItemGroup>
      <ObjDirs Include="$(SrcRoot)\SDK\Common\obj" />
      <ObjDirs Include="$(SrcRoot)\SDK\WorkflowClient\obj" />
      <ObjDirs Include="$(SrcRoot)\SDK\Api.Client.ManagedGrpc\obj" />
    </ItemGroup>

    <Message Text="[$(DocFxGeneratorPrefix)]    CleanObjDirs:      DocFx done. Cleaning Obj Directories." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CleanObjDirs:      Timestamp:       $([System.DateTime]::Now.ToString('HH:mm:ss.fffff'))." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CleanObjDirs:      Project file:    &quot;$(MSBuildProjectFullPath)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CleanObjDirs:      TargetFramework: &quot;$(TargetFramework)&quot;." Importance="high" />    
    <Message Text="[$(DocFxGeneratorPrefix)]    CleanObjDirs:      SrcRoot:         &quot;$(SrcRoot)&quot;." Importance="high" />
    <Message Text="[$(DocFxGeneratorPrefix)]    CleanObjDirs:      ObjDirs:         {@(ObjDirs->Count())}=&quot;@(ObjDirs)&quot;." Importance="high" />

    <RemoveDir Directories="@(ObjDirs)">
               <Output TaskParameter="RemovedDirectories"
                       ItemName="RemovedObjDirs" />
    </RemoveDir>

    <Message Text="[$(DocFxGeneratorPrefix)]    CleanObjDirs:    RemovedObjDirs:  {@(RemovedObjDirs->Count())}=&quot;@(RemovedObjDirs)&quot;." Importance="high" />
    <Message Text=" " Importance="high" />

  </Target>
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->

</Project>
